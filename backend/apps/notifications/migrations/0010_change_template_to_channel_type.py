# Generated by Django 4.2.25 on 2025-10-12 16:48

from django.db import migrations, models


def migrate_channel_to_channel_type(apps, schema_editor):
    """
    Миграция данных: копируем channel.code в channel_type
    """
    NotificationTemplate = apps.get_model('notifications', 'NotificationTemplate')
    NotificationChannel = apps.get_model('notifications', 'NotificationChannel')

    # Создаем маппинг channel_id -> code
    channel_map = {ch.id: ch.code for ch in NotificationChannel.objects.all()}

    # Мигрируем данные
    for template in NotificationTemplate.objects.all():
        if template.channel_id:
            template.channel_type = channel_map.get(template.channel_id, 'email')
            template.save(update_fields=['channel_type'])
            print(f"✅ Мигрирован шаблон ID {template.id}: channel_id={template.channel_id} → channel_type={template.channel_type}")


def reverse_migrate(apps, schema_editor):
    """
    Обратная миграция: восстанавливаем channel из channel_type
    """
    NotificationTemplate = apps.get_model('notifications', 'NotificationTemplate')
    NotificationChannel = apps.get_model('notifications', 'NotificationChannel')

    # Создаем маппинг code -> channel_id
    channel_map = {ch.code: ch.id for ch in NotificationChannel.objects.all()}

    for template in NotificationTemplate.objects.all():
        if template.channel_type:
            template.channel_id = channel_map.get(template.channel_type)
            template.save(update_fields=['channel_id'])


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0009_notificationtemplate_is_system'),
    ]

    operations = [
        # 1. Добавляем поле channel_type с временным default
        migrations.AddField(
            model_name='notificationtemplate',
            name='channel_type',
            field=models.CharField(
                max_length=50,
                choices=[
                    ('telegram', 'Telegram'),
                    ('whatsapp', 'WhatsApp'),
                    ('email', 'Email'),
                ],
                verbose_name='Тип канала',
                help_text='Тип канала (email, telegram, whatsapp)',
                db_index=True,
                default='email'  # Временный default для существующих записей
            ),
        ),
        # 2. Мигрируем данные из channel в channel_type
        migrations.RunPython(migrate_channel_to_channel_type, reverse_migrate),
        # 3. Удаляем старое поле channel
        migrations.RemoveField(
            model_name='notificationtemplate',
            name='channel',
        ),
        # 4. Обновляем Meta с новым ordering
        migrations.AlterModelOptions(
            name='notificationtemplate',
            options={
                'ordering': ['notification_type', 'channel_type', 'name'],
                'verbose_name': 'Шаблон уведомления',
                'verbose_name_plural': 'Шаблоны уведомлений'
            },
        ),
        # 5. Добавляем constraint для уникальности is_default шаблонов
        migrations.AddConstraint(
            model_name='notificationtemplate',
            constraint=models.UniqueConstraint(
                fields=['notification_type', 'channel_type'],
                condition=models.Q(is_default=True),
                name='unique_default_template_per_type_and_channel'
            ),
        ),
    ]
