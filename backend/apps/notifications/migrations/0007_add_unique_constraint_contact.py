# Generated by Django 4.2.25 on 2025-10-12 14:21

from django.db import migrations, models


def remove_duplicate_contacts(apps, schema_editor):
    """
    Удаляет дубликаты контактов, оставляя только самый старый (с минимальным id).
    """
    NotificationContact = apps.get_model('notifications', 'NotificationContact')

    # Находим все уникальные комбинации channel_type + value
    seen = set()
    duplicates_to_delete = []

    for contact in NotificationContact.objects.all().order_by('id'):
        key = (contact.channel_type, contact.value)
        if key in seen:
            # Это дубликат - помечаем на удаление
            duplicates_to_delete.append(contact.id)
        else:
            seen.add(key)

    # Удаляем дубликаты
    if duplicates_to_delete:
        NotificationContact.objects.filter(id__in=duplicates_to_delete).delete()
        print(f"Удалено {len(duplicates_to_delete)} дубликатов контактов")


def reverse_remove_duplicates(apps, schema_editor):
    """Обратная операция - ничего не делаем, т.к. дубликаты уже удалены."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0006_remove_old_channel_field'),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_contacts, reverse_remove_duplicates),
    ]
