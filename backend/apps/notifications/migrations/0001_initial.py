# Generated by Django 4.2.25 on 2025-10-11 15:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Уникальный код для программного доступа (например: orders, system)', max_length=50, unique=True, verbose_name='Код категории')),
                ('name', models.CharField(help_text='Отображаемое название (например: Заказы, Системные)', max_length=200, verbose_name='Название категории')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('order', models.IntegerField(default=0, verbose_name='Порядок отображения')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Категория уведомлений',
                'verbose_name_plural': 'Категории уведомлений',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Уникальный код (например: email, whatsapp, telegram)', max_length=50, unique=True, verbose_name='Код канала')),
                ('name', models.CharField(max_length=100, verbose_name='Название канала')),
                ('icon', models.CharField(blank=True, help_text='Например: FaEnvelope, FaWhatsapp', max_length=50, verbose_name='Класс иконки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('settings', models.JSONField(blank=True, default=dict, help_text='JSON с настройками: SMTP, API ключи и т.д.', verbose_name='Настройки канала')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Канал связи',
                'verbose_name_plural': 'Каналы связи',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например: Администратор, Менеджер', max_length=100, verbose_name='Имя контакта')),
                ('value', models.CharField(help_text='Email адрес или номер телефона', max_length=200, verbose_name='Значение')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='notifications.notificationchannel', verbose_name='Канал')),
            ],
            options={
                'verbose_name': 'Контакт для уведомлений',
                'verbose_name_plural': 'Контакты для уведомлений',
                'ordering': ['channel', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Уникальный код (например: new_order, order_status_changed)', max_length=50, unique=True, verbose_name='Код типа')),
                ('name', models.CharField(help_text='Отображаемое название (например: Новый заказ)', max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_enabled', models.BooleanField(default=True, help_text='Глобальное включение/выключение этого типа уведомлений', verbose_name='Включено')),
                ('order', models.IntegerField(default=0, verbose_name='Порядок отображения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_types', to='notifications.notificationcategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Тип уведомления',
                'verbose_name_plural': 'Типы уведомлений',
                'ordering': ['category', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, help_text='Используется только для email', max_length=500, verbose_name='Тема (для email)')),
                ('template', models.TextField(help_text='Текст с переменными: {{order_number}}, {{customer_name}}, {{total_amount}} и т.д.', verbose_name='Шаблон сообщения')),
                ('variables_help', models.JSONField(blank=True, default=dict, help_text='JSON с описанием доступных переменных', verbose_name='Справка по переменным')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='notifications.notificationchannel', verbose_name='Канал')),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='notifications.notificationtype', verbose_name='Тип уведомления')),
            ],
            options={
                'verbose_name': 'Шаблон уведомления',
                'verbose_name_plural': 'Шаблоны уведомлений',
                'unique_together': {('notification_type', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='NotificationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Отправлять уведомления по этому каналу', verbose_name='Включено')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='notifications.notificationchannel', verbose_name='Канал')),
                ('contacts', models.ManyToManyField(help_text='Кому отправлять уведомления', related_name='rules', to='notifications.notificationcontact', verbose_name='Контакты')),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='notifications.notificationtype', verbose_name='Тип уведомления')),
            ],
            options={
                'verbose_name': 'Правило отправки уведомления',
                'verbose_name_plural': 'Правила отправки уведомлений',
                'unique_together': {('notification_type', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_value', models.CharField(blank=True, help_text='Email или телефон клиента (если не из контактов)', max_length=200, verbose_name='Получатель')),
                ('status', models.CharField(choices=[('pending', 'Ожидает отправки'), ('sent', 'Отправлено'), ('failed', 'Ошибка'), ('retrying', 'Повторная попытка')], default='pending', max_length=20, verbose_name='Статус')),
                ('message', models.TextField(help_text='Отправленный текст', verbose_name='Сообщение')),
                ('error_message', models.TextField(blank=True, verbose_name='Сообщение об ошибке')),
                ('retry_count', models.IntegerField(default=0, verbose_name='Количество попыток')),
                ('max_retries', models.IntegerField(default=3, help_text='Максимальное количество повторных попыток при ошибке', verbose_name='Максимум попыток')),
                ('next_retry_at', models.DateTimeField(blank=True, help_text='Время следующей попытки отправки', null=True, verbose_name='Следующая попытка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('channel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.notificationchannel', verbose_name='Канал')),
                ('contact', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.notificationcontact', verbose_name='Контакт')),
                ('notification_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.notificationtype', verbose_name='Тип уведомления')),
            ],
            options={
                'verbose_name': 'Лог уведомления',
                'verbose_name_plural': 'Логи уведомлений',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'next_retry_at'], name='notificatio_status_64d90d_idx')],
            },
        ),
    ]
