# Generated by Django 4.2.25 on 2025-10-12 18:25

from django.db import migrations, models


def migrate_variables_help_to_notification_type(apps, schema_editor):
    """
    Мигрируем variables_help из шаблонов в типы уведомлений.
    Собираем все переменные из всех шаблонов одного типа уведомления и объединяем.
    """
    NotificationTemplate = apps.get_model('notifications', 'NotificationTemplate')
    NotificationType = apps.get_model('notifications', 'NotificationType')

    # Группируем шаблоны по типу уведомления
    notification_types = {}

    for template in NotificationTemplate.objects.all():
        nt_id = template.notification_type_id
        if nt_id not in notification_types:
            notification_types[nt_id] = {}

        # Объединяем variables_help из всех шаблонов этого типа
        if template.variables_help:
            for key, value in template.variables_help.items():
                # Если ключ уже есть, берем более длинное описание
                if key in notification_types[nt_id]:
                    existing = notification_types[nt_id][key]
                    if len(str(value)) > len(str(existing)):
                        notification_types[nt_id][key] = value
                else:
                    notification_types[nt_id][key] = value

    # Обновляем типы уведомлений
    for nt_id, variables in notification_types.items():
        try:
            nt = NotificationType.objects.get(id=nt_id)
            nt.variables_help = variables
            nt.save(update_fields=['variables_help'])
            print(f"✅ Мигрирован NotificationType ID {nt_id}: {len(variables)} переменных - {list(variables.keys())}")
        except NotificationType.DoesNotExist:
            print(f"⚠️  NotificationType ID {nt_id} не найден, пропускаем")


def reverse_migrate(apps, schema_editor):
    """
    Обратная миграция: копируем variables_help из типа уведомления во все его шаблоны.
    """
    NotificationTemplate = apps.get_model('notifications', 'NotificationTemplate')
    NotificationType = apps.get_model('notifications', 'NotificationType')

    for template in NotificationTemplate.objects.all():
        if template.notification_type:
            template.variables_help = template.notification_type.variables_help
            template.save(update_fields=['variables_help'])


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0011_notificationtemplate_unique_template_name_per_type_and_channel'),
    ]

    operations = [
        # 1. Добавляем поле variables_help в NotificationType
        migrations.AddField(
            model_name='notificationtype',
            name='variables_help',
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text='JSON с описанием переменных для этого типа уведомления. Например: {"order_number": "Номер заказа", "customer_name": "Имя клиента"}',
                verbose_name='Доступные переменные'
            ),
        ),
        # 2. Мигрируем данные из шаблонов в типы уведомлений
        migrations.RunPython(migrate_variables_help_to_notification_type, reverse_migrate),
        # 3. Удаляем старое поле variables_help из NotificationTemplate
        migrations.RemoveField(
            model_name='notificationtemplate',
            name='variables_help',
        ),
    ]
