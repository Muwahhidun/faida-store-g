"""
Django —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

from django.dispatch import receiver
from django.db.models.signals import post_save
from django.contrib.auth import get_user_model
from djoser.signals import user_registered
from .services import NotificationDispatcher
import logging

logger = logging.getLogger(__name__)
User = get_user_model()


@receiver(user_registered)
def send_registration_notification(sender, user, request, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Djoser.
    """
    try:
        logger.info(f"üîî –°–∏–≥–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

        context = {
            'username': user.username,
            'email': user.email,
            'first_name': user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'last_name': user.last_name or '',
            'full_name': user.get_full_name() or user.username,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∞–≤–∏–ª
        NotificationDispatcher.send_notification('user_registration', context)

        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è {user.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


def send_password_reset_notification(user, reset_url):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ email –∫–ª–∞—Å—Å–∞ Djoser.
    """
    try:
        context = {
            'username': user.username,
            'email': user.email,
            'reset_url': reset_url,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∞–≤–∏–ª
        NotificationDispatcher.send_notification('password_reset', context)

        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è –¥–ª—è {user.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è: {e}")


@receiver(post_save, sender='orders.Order')
def send_order_notifications(sender, instance, created, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items_list = []
        for item in instance.items.all():
            items_list.append(f"{item.product_name or (item.product.name if item.product else '–¢–æ–≤–∞—Ä')} x {item.quantity}")

        base_context = {
            'order_number': instance.order_number,
            'customer_name': instance.customer_name,
            'customer_phone': instance.customer_phone,
            'total_amount': f"{instance.total_amount} ‚ÇΩ",
            'items_list': ', '.join(items_list) if items_list else '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤',
            'delivery_address': instance.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω',
            'comment': instance.comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        }

        if created:
            # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
            logger.info(f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {instance.order_number}")
            NotificationDispatcher.send_notification('new_order', base_context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä—é–∫: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            try:
                from apps.orders.models import Order
                old_instance = Order.objects.get(pk=instance.pk)
                if old_instance.status != instance.status:
                    logger.info(f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {instance.order_number} –∏–∑–º–µ–Ω–µ–Ω: {old_instance.status} ‚Üí {instance.status}")
                    context = {
                        **base_context,
                        'old_status': old_instance.get_status_display(),
                        'new_status': instance.get_status_display(),
                        'status': instance.get_status_display(),
                    }
                    NotificationDispatcher.send_notification('order_status_changed', context)
            except sender.DoesNotExist:
                pass

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")
