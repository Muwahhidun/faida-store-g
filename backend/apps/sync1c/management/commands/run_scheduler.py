"""
–ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
"""

import time
import logging
import threading
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.utils import timezone
from apps.sync1c.models import IntegrationSource

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--check-interval',
            type=int,
            default=30,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)'
        )
        parser.add_argument(
            '--once',
            action='store_true',
            help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'
        )

    def handle(self, *args, **options):
        check_interval = options['check_interval']
        run_once = options['once']
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {check_interval} —Å–µ–∫)')
        )
        
        try:
            if run_once:
                self.check_and_run_syncs()
            else:
                self.run_scheduler_loop(check_interval)
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}'))
            logger.exception('–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')

    def run_scheduler_loop(self, check_interval):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while True:
            try:
                self.check_and_run_syncs()
                time.sleep(check_interval)
            except Exception as e:
                logger.exception(f'–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}')
                time.sleep(check_interval)

    def check_and_run_syncs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é."""
        now = timezone.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
        sources = IntegrationSource.objects.filter(
            auto_sync_enabled=True,
            is_active=True
        )
        
        for source in sources:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)
                if source.is_data_sync_due() and not source.is_syncing:
                    self.start_data_sync(source)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–¥–∞–Ω–Ω—ã–µ + –º–µ–¥–∏–∞)
                elif source.is_full_sync_due() and not source.is_syncing:
                    self.start_full_sync(source)
                    
            except Exception as e:
                logger.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.code}: {e}')
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—á–Ω–∏–∫
                source.import_status = 'failed'
                source.import_error_message = str(e)
                source.last_error_time = now
                source.save()

    def start_data_sync(self, source):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö."""
        self.stdout.write(
            self.style.SUCCESS(f'‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "{source.name}"')
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        source.import_status = 'running_data'
        source.last_import_started = timezone.now()
        source.import_error_message = None
        source.save()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=self.run_sync_command,
            args=(source, True)  # True = skip_media
        )
        thread.daemon = True
        thread.start()

    def start_full_sync(self, source):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é."""
        self.stdout.write(
            self.style.SUCCESS(f'üñºÔ∏è –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "{source.name}"')
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        source.import_status = 'running_full'
        source.last_import_started = timezone.now()
        source.import_error_message = None
        source.save()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=self.run_sync_command,
            args=(source, False)  # False = –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞
        )
        thread.daemon = True
        thread.start()

    def run_sync_command(self, source, skip_media):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        try:
            # –°—Ç—Ä–æ–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            command_args = [source.code]
            if skip_media:
                command_args.append('--skip-media')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–º–ø–æ—Ä—Ç–∞
            call_command('import_1c_data', *command_args)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
            source.refresh_from_db()
            source.import_status = 'completed'
            source.last_import_completed = timezone.now()
            
            if skip_media:
                source.last_data_sync = timezone.now()
                source.schedule_next_data_sync()
                sync_type = '–±—ã—Å—Ç—Ä–∞—è'
            else:
                source.last_full_sync = timezone.now()
                source.schedule_next_full_sync()
                # –ü—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–Ω–Ω—ã—Ö
                source.last_data_sync = timezone.now()
                source.schedule_next_data_sync()
                sync_type = '–ø–æ–ª–Ω–∞—è'
            
            source.save()
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {sync_type.capitalize()} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è "{source.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            )
            
        except Exception as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            source.refresh_from_db()
            source.import_status = 'failed'
            source.import_error_message = str(e)
            source.last_error_time = timezone.now()
            source.save()
            
            logger.exception(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.code}: {e}')
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ "{source.name}": {e}')
            )
