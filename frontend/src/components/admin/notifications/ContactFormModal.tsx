/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

import React, { useState, useEffect } from 'react';
import { FaTimes, FaEnvelope, FaWhatsapp, FaTelegram } from 'react-icons/fa';
import type { NotificationContact } from '../../../types/notifications';
import { CustomSelect, SelectOption } from '../../CustomSelect';

interface ContactFormModalProps {
    contact: NotificationContact | null;
    onClose: () => void;
    onSubmit: (data: Partial<NotificationContact>) => void;
    isSubmitting: boolean;
}

const CHANNEL_TYPE_OPTIONS = [
    { value: 'telegram', label: 'Telegram', icon: '‚úàÔ∏è', emoji: 'üì±' },
    { value: 'whatsapp', label: 'WhatsApp', icon: 'üí¨', emoji: 'üìû' },
    { value: 'email', label: 'Email', icon: 'üìß', emoji: '‚úâÔ∏è' },
] as const;

// –û–ø—Ü–∏–∏ –¥–ª—è CustomSelect —Å —ç–º–æ–¥–∑–∏
const SELECT_OPTIONS: SelectOption[] = CHANNEL_TYPE_OPTIONS.map(opt => ({
    value: opt.value,
    label: `${opt.icon} ${opt.label}`
}));

export const ContactFormModal: React.FC<ContactFormModalProps> = ({
    contact,
    onClose,
    onSubmit,
    isSubmitting
}) => {
    const [formData, setFormData] = useState<{
        name: string;
        channel_type: 'telegram' | 'whatsapp' | 'email' | '';
        value: string;
        is_active: boolean;
    }>({
        name: '',
        channel_type: '',
        value: '',
        is_active: true
    });

    const [errors, setErrors] = useState<Record<string, string>>({});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    useEffect(() => {
        const handleEsc = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && !isSubmitting) {
                onClose();
            }
        };
        window.addEventListener('keydown', handleEsc);
        return () => window.removeEventListener('keydown', handleEsc);
    }, [onClose, isSubmitting]);

    useEffect(() => {
        if (contact) {
            setFormData({
                name: contact.name,
                channel_type: contact.channel_type,
                value: contact.value,
                is_active: contact.is_active
            });
        }
    }, [contact]);

    const validateForm = () => {
        const newErrors: Record<string, string> = {};

        if (!formData.name.trim()) {
            newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞';
        }

        if (!formData.channel_type) {
            newErrors.channel_type = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞';
        }

        if (!formData.value.trim()) {
            newErrors.value = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
        } else {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
            if (formData.channel_type === 'email') {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(formData.value)) {
                    newErrors.value = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
                }
            } else if (formData.channel_type === 'whatsapp') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 10)
                const phoneRegex = /^\d{10,}$/;
                if (!phoneRegex.test(formData.value.replace(/[^\d]/g, ''))) {
                    newErrors.value = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)';
                }
            }
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        onSubmit(formData);
    };

    const handleOverlayClick = (e: React.MouseEvent) => {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–∞ overlay, –∞ –Ω–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∫–∏
        if (e.target === e.currentTarget && !isSubmitting) {
            onClose();
        }
    };

    return (
        <div
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            onClick={handleOverlayClick}
        >
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-900">
                        {contact ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'}
                    </h3>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 transition-colors"
                    >
                        <FaTimes size={20} />
                    </button>
                </div>

                {/* –§–æ—Ä–º–∞ */}
                <form onSubmit={handleSubmit} className="px-6 py-4 space-y-4">
                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            –ù–∞–∑–≤–∞–Ω–∏–µ <span className="text-red-500">*</span>
                        </label>
                        <input
                            type="text"
                            value={formData.name}
                            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                            className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-secondary-500 ${
                                errors.name ? 'border-red-500' : 'border-gray-300'
                            }`}
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä WhatsApp"
                        />
                        {errors.name && (
                            <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                        )}
                    </div>

                    {/* –¢–∏–ø –∫–∞–Ω–∞–ª–∞ */}
                    <div>
                        <CustomSelect
                            label="–¢–∏–ø –∫–∞–Ω–∞–ª–∞ *"
                            value={formData.channel_type}
                            onChange={(value) => setFormData({ ...formData, channel_type: value as any })}
                            options={SELECT_OPTIONS}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞"
                            error={errors.channel_type}
                        />
                        <p className="mt-1 text-xs text-gray-500">
                            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        </p>
                    </div>

                    {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            {formData.channel_type === 'email' && 'Email –∞–¥—Ä–µ—Å'}
                            {formData.channel_type === 'whatsapp' && '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
                            {formData.channel_type === 'telegram' && 'Telegram Chat ID'}
                            {!formData.channel_type && '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}
                            <span className="text-red-500"> *</span>
                        </label>
                        <input
                            type={formData.channel_type === 'email' ? 'email' : 'text'}
                            value={formData.value}
                            onChange={(e) => setFormData({ ...formData, value: e.target.value })}
                            className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-secondary-500 ${
                                errors.value ? 'border-red-500' : 'border-gray-300'
                            }`}
                            placeholder={
                                formData.channel_type === 'email'
                                    ? 'admin@example.com'
                                    : formData.channel_type === 'whatsapp'
                                    ? '79991234567'
                                    : formData.channel_type === 'telegram'
                                    ? '198916951'
                                    : '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                            }
                        />
                        {errors.value && (
                            <p className="mt-1 text-sm text-red-500">{errors.value}</p>
                        )}
                        {formData.channel_type === 'whatsapp' && (
                            <p className="mt-1 text-xs text-gray-500">
                                –§–æ—Ä–º–∞—Ç: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã + –Ω–æ–º–µ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79991234567)
                            </p>
                        )}
                        {formData.channel_type === 'telegram' && (
                            <p className="mt-1 text-xs text-gray-500">
                                Chat ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –±–æ—Ç–∞ @userinfobot –≤ Telegram
                            </p>
                        )}
                    </div>

                    {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
                    <div className="flex items-center">
                        <input
                            type="checkbox"
                            id="is_active"
                            checked={formData.is_active}
                            onChange={(e) => setFormData({ ...formData, is_active: e.target.checked })}
                            className="h-4 w-4 text-secondary-600 focus:ring-secondary-500 border-gray-300 rounded"
                        />
                        <label htmlFor="is_active" className="ml-2 text-sm text-gray-700">
                            –ê–∫—Ç–∏–≤–µ–Ω (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç)
                        </label>
                    </div>
                </form>

                {/* –§—É—Ç–µ—Ä */}
                <div className="flex items-center justify-end gap-3 px-6 py-4 border-t border-gray-200 bg-gray-50">
                    <button
                        type="button"
                        onClick={onClose}
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                        disabled={isSubmitting}
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                        type="submit"
                        onClick={handleSubmit}
                        disabled={isSubmitting}
                        className="px-4 py-2 text-sm font-medium text-white bg-secondary-500 rounded-lg hover:bg-secondary-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : contact ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                    </button>
                </div>
            </div>
        </div>
    );
};
