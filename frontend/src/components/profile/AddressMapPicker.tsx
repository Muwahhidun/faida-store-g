import React, { useEffect, useRef, useState } from 'react';

interface AddressData {
  full_address: string;
  city: string;
  street: string;
  house: string;
  latitude: number;
  longitude: number;
}

interface AddressMapPickerProps {
  initialCoords?: [number, number];
  onAddressSelect: (data: AddressData) => void;
}

declare global {
  interface Window {
    ymaps: any;
  }
}

const AddressMapPicker: React.FC<AddressMapPickerProps> = ({
  initialCoords = [42.9849, 47.5047], // –ú–∞—Ö–∞—á–∫–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  onAddressSelect
}) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<any>(null);
  const placemarkRef = useRef<any>(null);
  const searchTimeoutRef = useRef<number | null>(null);
  const [address, setAddress] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [isSearching, setIsSearching] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    const existingScript = document.querySelector('script[src*="api-maps.yandex.ru"]');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps API –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!window.ymaps && !existingScript) {
      const script = document.createElement('script');
      script.src = 'https://api-maps.yandex.ru/2.1/?apikey=02c1b9b1-c815-4c2f-a505-1f11e65a8d8d&lang=ru_RU';
      script.async = true;
      script.onload = () => initMap();
      document.head.appendChild(script);
    } else if (window.ymaps) {
      initMap();
    }

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.destroy();
        mapInstanceRef.current = null;
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialCoords (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  useEffect(() => {
    console.log('AddressMapPicker: initialCoords changed', initialCoords);

    if (mapInstanceRef.current && placemarkRef.current && initialCoords) {
      // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialCoords
      console.log('Setting map to coords:', initialCoords);
      placemarkRef.current.geometry.setCoordinates(initialCoords);
      mapInstanceRef.current.setCenter(initialCoords, 16);
      geocodeCoordinates(initialCoords);
    }
  }, [initialCoords[0], initialCoords[1]]);

  const initMap = () => {
    window.ymaps.ready(() => {
      if (!mapRef.current) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
      if (mapInstanceRef.current) return;

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
      const map = new window.ymaps.Map(mapRef.current, {
        center: initialCoords,
        zoom: 16,
        controls: ['zoomControl', 'geolocationControl']
      }, {
        suppressMapOpenBlock: true // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–æ-–±–ª–æ–∫–∏ –Ø–Ω–¥–µ–∫—Å–∞
      });

      mapInstanceRef.current = map;

      // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ
      const placemark = new window.ymaps.Placemark(initialCoords, {}, {
        preset: 'islands#redDotIcon',
        draggable: true // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
      });

      map.geoObjects.add(placemark);
      placemarkRef.current = placemark;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ä
      map.events.add('click', (e: any) => {
        const coords = e.get('coords');
        placemark.geometry.setCoordinates(coords);
        geocodeCoordinates(coords);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
      placemark.events.add('dragend', () => {
        const coords = placemark.geometry.getCoordinates();
        geocodeCoordinates(coords);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      geocodeCoordinates(initialCoords);
      setIsLoading(false);
    });
  };

  const geocodeCoordinates = async (coords: [number, number]) => {
    try {
      const geocoder = await window.ymaps.geocode(coords);
      const firstGeoObject = geocoder.geoObjects.get(0);

      if (firstGeoObject) {
        const addressLine = firstGeoObject.getAddressLine();
        const locality = firstGeoObject.getLocalities()[0] || '';
        const thoroughfare = firstGeoObject.getThoroughfare() || '';
        const premiseNumber = firstGeoObject.getPremiseNumber() || '';

        setAddress(addressLine);
        setSearchQuery(addressLine);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–æ–¥–∏—Ç–µ–ª—é
        // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ 8 –∑–Ω–∞–∫–æ–≤ (—Ç–æ—á–Ω–æ—Å—Ç—å ~1–º–º, —ç—Ç–æ–≥–æ –±–æ–ª–µ–µ —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
        const addressData: AddressData = {
          full_address: addressLine,
          city: locality,
          street: thoroughfare,
          house: premiseNumber,
          latitude: parseFloat(coords[0].toFixed(8)),
          longitude: parseFloat(coords[1].toFixed(8))
        };

        onAddressSelect(addressData);
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error?.message, error?.toString());
      setAddress('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å');
    }
  };

  const handleSearchAddress = async (query: string) => {
    if (!query.trim() || !window.ymaps) return;

    setIsSearching(true);
    try {
      // –ü–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –î–∞–≥–µ—Å—Ç–∞–Ω—É
      const geocoder = await window.ymaps.geocode(query, {
        results: 1,
        boundedBy: [[41.0, 45.0], [44.0, 49.0]], // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –î–∞–≥–µ—Å—Ç–∞–Ω–∞
      });

      const firstGeoObject = geocoder.geoObjects.get(0);

      if (firstGeoObject) {
        const coords = firstGeoObject.geometry.getCoordinates();

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏ –∫–∞—Ä—Ç—É
        if (placemarkRef.current && mapInstanceRef.current) {
          placemarkRef.current.geometry.setCoordinates(coords);
          mapInstanceRef.current.setCenter(coords, 16);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
          await geocodeCoordinates(coords as [number, number]);
        }
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞:', error?.message, error?.toString());
    } finally {
      setIsSearching(false);
    }
  };

  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchQuery(value);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // –î–µ–±–∞—É–Ω—Å 800–º—Å
    searchTimeoutRef.current = window.setTimeout(() => {
      handleSearchAddress(value);
    }, 800);
  };

  return (
    <div className="space-y-3">
      {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞
        </label>
        <div className="relative">
          <input
            type="text"
            value={searchQuery}
            onChange={handleSearchInputChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: –ú–∞—Ö–∞—á–∫–∞–ª–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 10"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {isSearching && (
            <div className="absolute right-3 top-2.5">
              <div className="animate-spin h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full"></div>
            </div>
          )}
        </div>
        <p className="text-xs text-gray-500 mt-1">
          –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å, –∏ –º–∞—Ä–∫–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è
        </p>
      </div>

      {/* –ö–∞—Ä—Ç–∞ */}
      <div
        ref={mapRef}
        className="w-full h-96 rounded-lg border border-gray-300 relative"
      >
        {isLoading && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
            <div className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>
          </div>
        )}
      </div>

      {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å */}
      <div className="flex items-start space-x-2 text-sm bg-blue-50 p-3 rounded-lg border border-blue-200">
        <span className="text-blue-600 mt-0.5">üìç</span>
        <div className="flex-1">
          <p className="font-medium text-blue-900">–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</p>
          <p className="text-blue-700">{address || '–ê–¥—Ä–µ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω'}</p>
        </div>
      </div>

      <p className="text-xs text-gray-500">
        –ò–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É / –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      </p>
    </div>
  );
};

export default AddressMapPicker;
